'use strict';

// Wrap everything in an anonymous function to avoid poluting the global namespace
(function() {
    // Event handlers for filter change
    alert(" script file called");
    let unregisterHandlerFunctions = [];

    let worksheet1, worksheet2;
    // Use the jQuery document ready signal to know when everything has been initialized
    $(document).ready(function() {
        var width = 5;
        var height = 100;

        var xpos = 50;
        var ypos = 50;


        tableau.extensions.initializeAsync().then(function() {
            // Get worksheets from tableau dashboard
            worksheet1 = tableau.extensions.dashboardContent.dashboard.worksheets[0];
            worksheet1.getSummaryDataAsync().then(function(mydata) {

                console.log(mydata);

                var mydata2 = mydata.data;
                console.log(mydata2[3][0].value);
                console.log(mydata2[3][1].value);
                console.log(mydata2[3][2].value);
                console.log(mydata2[3][3].value);


                console.log(mydata2[2][0].value);
                console.log(mydata2[2][1].value);
                console.log(mydata2[2][2].value);
                console.log(mydata2[2][3].value);


                var svg = d3.select("body").append("svg");

                svg.selectAll("bar_1")
                    .data(mydata2).enter()
                    .append("rect")
                    .attr("width", width)
                    .attr("height", 100)
                    .attr("x", function(d, i) {
                        return d[3].value;
                    })
                    .attr("y", function(d, i) {
                        return 50;
                    })
                    .attr("stroke", "red")

                ;


            });
            console.log("end");
        });


    });

})();

window.onload = function() {
	const DEF_Size14Vert = { font: { sz: 24 }, alignment: { vertical: 'center', horizontal: 'center' } };
	const BORDER_ALL = { border: { top: { style: 'thick', color: { rgb: '4b0082' } }, right: { style: 'thick', color: { rgb: '4b0082' } }, bottom: { style: 'thick', color: { rgb: '4b0082' } }, left: { style: 'thick', color: { rgb: '4b0082' } } } };
	const DEF_FixedSize14Vert = { font: { name: 'Courier New', sz: 12 }, alignment: { horizontal: 'center', vertical: 'center' } };
	const DEF_FixedSize14Wht = { font: { name: 'Courier New', sz: 12, color: { rgb: 'f1f1f1' } } };
	let rowRota = [
				{ v: 'textRotation: 15', t: 's', s: { alignment: { horizontal: 'center', textRotation: 15 } } },
				{ v: 'textRotation: 30', t: 's', s: { alignment: { horizontal: 'center', textRotation: 30 } } },
				{ v: 'textRotation: 45', t: 's', s: { alignment: { horizontal: 'center', textRotation: 45 } } },
				{ v: 'textRotation: 90', t: 's', s: { alignment: { horizontal: 'center', textRotation: 90 } } },
				{ v: 'textRotation: 145', t: 's', s: { alignment: { horizontal: 'center', textRotation: 145 } } },
				{ v: 'textRotation: 160', t: 's', s: { alignment: { horizontal: 'center', textRotation: 160 } } },
			];
			
	const DEF_FxSz14RgbVert = { font: { name: 'Calibri', sz: 11, color: { rgb: '000000' } }, alignment: { vertical: 'center', horizontal: 'center' } };
	
    document.getElementById("demo").onclick = () => {
        // (C1) DUMMY DATA
        let unregisterHandlerFunctions = [];
        let worksheet1, worksheet2;
        tableau.extensions.initializeAsync().then(function() {

            let dashboard = tableau.extensions.dashboardContent.dashboard;
            dashboard.worksheets.forEach(function(worksheet) {
                if (worksheet.name.includes('Report_Export_Details_D')) {
                    worksheet2 = worksheet;
                    worksheet2.getSummaryDataAsync().then(function(mydata) {
                        let dashboardData = mydata.data;
                        let sheetName = dashboardData[0][4].value;
                        let reportHeader = dashboardData[0][6].value;
                        let reportRefreshTime = dashboardData[0][8].value;
                        let reportFooter = dashboardData[0][7].value;

                        dashboard.worksheets.forEach(function(sheet) {
                            if (sheet.name === sheetName) {
                                sheet.getSummaryDataAsync().then(function(d) {

                                    let sheetData = d;
                                    console.log(sheetData);
                                    let columnLength = sheetData.columns.length;
                                    let columns = sheetData.columns;
                                    let result = [];

                                    let tt = [];
									let rr = [];
									let empt = [];
                                    let ii = columnLength % 2;
                                    for (let i = 0; i < columnLength; i++) {
                                        if (ii == i) {
                                            //tt.push(reportHeader);
											/* tt.push({ v: reportHeader, t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '404040' } }, font: { sz: 16, name: 'Calibri', bold: true } } }); */
											tt.push({ v: reportHeader, t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '404040' } }, font: { sz: 22, name: 'Calibri', color: { rgb: 'f1f1f1' } } } });
                                        } else {
                                            //tt.push(" ");
											/* tt.push({ v: ' ', t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '404040' } }, font: { sz: 16, name: 'Calibri', bold: true } } }); */
											tt.push({ v: ' ', t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '404040' } }, font: { sz: 22, name: 'Calibri', color: { rgb: 'f1f1f1' } } } });
                                        }
										if (i==columnLength-2) {
											/* rr.push({ v: reportRefreshTime, t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '404040' } }, font: { sz: 11, name: 'Calibri', bold: true } } }); */
											rr.push({ v: reportRefreshTime, t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '404040' } }, font: { sz: 11, name: 'Calibri', color: { rgb: 'f1f1f1' } } } });
										} else {
											/* rr.push({ v: ' ', t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '404040' } }, font: { sz: 16, name: 'Calibri', bold: true } } }); */
											rr.push({ v: ' ', t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '404040' } }, font: { sz: 11, name: 'Calibri', color: { rgb: 'f1f1f1' } } } });
										}
										empt.push(" ");
                                    }
                                    result.push(tt);
									result.push(empt);
									result.push(rr);
									result.push(empt);
									result.push(empt);

                                    tt = [];
                                    for (let i = 0; i < columnLength; i++) {
                                        let colEle = columns[i];
                                        //tt.push(colEle.fieldName);
										/* tt.push({ v: colEle.fieldName, t: 's', s: { ...DEF_FixedSize14Vert, fill: { fgColor: { theme: 4, tint: -0.5 } }, ...DEF_FixedSize14Wht } }); */
										tt.push({v: colEle.fieldName, t: 's', s: { ...DEF_FxSz14RgbVert, border: { right: { style: 'thin', color: { rgb: '000000' } }, left: { style: 'thin', color: { rgb: '000000' } }, bottom: { style: 'thin', color: { rgb: '000000' } },  top: { style: 'thin', color: { rgb: '000000' } } }, font: { sz: 11, name: 'Calibri', bold: true } }});
                                    }
                                    result.push(tt);

                                    let colData = sheetData.data;
                                    for (let i = 0; i < colData.length; i++) {
                                        let arrEle = colData[i];
                                        let tempArr = [];
                                        for (let j = 0; j < arrEle.length; j++) {
                                            if (i != 0 && j != arrEle.length - 1) {
                                                if (colData[i][j].value === colData[i - 1][j].value) {
                                                    //tempArr.push(" ");
													/* tempArr.push({ v: " ", t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '5ebd3e' } }, font: { sz: 16, name: 'Courier', bold: true } } }); */
													tempArr.push({v: ' ', t: 's', s: { ...DEF_FxSz14RgbVert, border: { right: { style: 'thin', color: { rgb: '000000' } }, left: { style: 'thin', color: { rgb: '000000' } }, bottom: { style: 'thin', color: { rgb: '000000' } },  top: { style: 'thin', color: { rgb: '000000' } } } }});
                                                } else {
                                                    //tempArr.push(arrEle[j].value);
													/* tempArr.push({ v: arrEle[j].value, t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '5ebd3e' } }, font: { sz: 16, name: 'Courier', bold: true } } }); */
													tempArr.push({v: arrEle[j].value, t: 's', s: { ...DEF_FxSz14RgbVert, border: { right: { style: 'thin', color: { rgb: '000000' } }, left: { style: 'thin', color: { rgb: '000000' } }, bottom: { style: 'thin', color: { rgb: '000000' } },  top: { style: 'thin', color: { rgb: '000000' } } } }});
                                                }
                                            } else {
                                                //tempArr.push(arrEle[j].value);
												/* tempArr.push({ v: arrEle[j].value, t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '5ebd3e' } }, font: { sz: 16, name: 'Courier', bold: true } } }); */
												tempArr.push({v: arrEle[j].value, t: 's', s: { ...DEF_FxSz14RgbVert, border: { right: { style: 'thin', color: { rgb: '000000' } }, left: { style: 'thin', color: { rgb: '000000' } }, bottom: { style: 'thin', color: { rgb: '000000' } },  top: { style: 'thin', color: { rgb: '000000' } } } }});
                                            }


                                        }
                                        result.push(tempArr);
                                        // console.log(tempArr);
                                    }

                                    tt = [];
                                    for (let i = 0; i < columnLength; i++) {
                                        if (ii == i) {
											//tt.push(reportFooter);
                                            /* tt.push({ v: reportFooter, t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '5ebd3e' } }, font: { sz: 16, name: 'Courier', bold: true } } }); */
											tt.push({ v: reportFooter, t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '404040' } }, font: { sz: 11, name: 'Calibri', color: { rgb: 'f1f1f1' } }, alignment: { vertical: 'bottom', horizontal: 'center' } } });
                                        } else {
											//tt.push(' ');
                                            /* tt.push({ v: ' ', t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '5ebd3e' } }, font: { sz: 16, name: 'Courier', bold: true } } }); */
											tt.push({ v: ' ', t: 's', s: { ...DEF_Size14Vert, fill: { fgColor: { rgb: '404040' } }, font: { sz: 11, name: 'Calibri', color: { rgb: 'f1f1f1' } }, alignment: { vertical: 'bottom', horizontal: 'center' } } });
                                        }
                                    }
									result.push(empt);
									result.push(empt);
                                    result.push(tt);
									//result.push(rowRota);

                                    // (C2) CREATE NEW EXCEL "FILE"
                                    var workbook = XLSX.utils.book_new(),
                                    worksheet = XLSX.utils.aoa_to_sheet(result);
									/* worksheet['!rows'] = [{ 'hpt': 100 }];
									worksheet['!cols'] = [{ width: 30 }]; */
									
									let objectMaxLength = []

									/* result.map(arr => {
									  Object.keys(arr).map(key => {
										let value = arr[key] === null ? '' : arr[key]

										if (typeof value === 'number')
										{
										  return objectMaxLength[key] = 30;
										}

										objectMaxLength[key] = objectMaxLength[key] >= value.length ? objectMaxLength[key]  : value.length
									  })
									})

									let worksheetCols = objectMaxLength.map(width => {
									  return {
										width
									  }
									})
									
									worksheet["!cols"] = worksheetCols; */
									let rowFooterMergeStart = 8 + sheetData.totalRowCount;
									
									worksheet['!cols'] = fitToColumn(result);
									worksheet['!rows'] = [{ 'hpt': 40 }];
									worksheet["!merges"] = [{ s: { r: 0, c: 0 }, e: { r: 1, c: columnLength-1 } }, 
									{ s: { r: 2, c: columnLength-2 }, e: { r: 2, c: columnLength-1 } },
									{ s: { r: rowFooterMergeStart, c: 0 }, e: { r: rowFooterMergeStart+2, c: columnLength-1 } }
									];
									
                                    workbook.SheetNames.push("First");
                                    workbook.Sheets["First"] = worksheet;

                                    // (C3) "FORCE DOWNLOAD" XLSX FILE
                                    XLSX.writeFile(workbook, new Date().getTime() + "_output.xlsx");

                                });
								return;
                            }
                        });

                    });
                }

            });

            // Get worksheets from tableau dashboard
            /* let worksheet2Data;
            worksheet2 = tableau.extensions.dashboardContent.dashboard.worksheets("Report_Export_Details_D1");
            worksheet2.getSummaryDataAsync().then(function(mydata) {
            	worksheet2Data = mydata;
            }); */

            /* worksheet1 = tableau.extensions.dashboardContent.dashboard.worksheets[0];
        worksheet1.getSummaryDataAsync().then(function(mydata) {

            console.log(mydata);

            var data = mydata.data;
			
			//console.log(data);

            let columnLength = mydata.columns.length;
			let columns = mydata.columns;
            let result = [];
			
			console.log(worksheet2Data);
			
			let tt = [];
			let ii = columnLength % 2;
			for (let i=0; i < columnLength; i++) {
				if (ii == i) {
					tt.push("Sheet 1");
				} else {
					tt.push(" ");
				}
			}
			result.push(tt);
			
			tt = [];
			for (let i=0; i < columnLength; i++) {
				let colEle = columns[i];
				tt.push(colEle.fieldName);
			}
			result.push(tt);

            let colData = mydata.data;
            for (let i = 0; i < colData.length; i++) {
                let arrEle = colData[i];
                let tempArr = [];
                for (let j = 0; j < arrEle.length; j++) {
                    if (i != 0 && j != arrEle.length - 1) {
                        if (colData[i][j].value === colData[i - 1][j].value) {
                            tempArr.push(" ");
                        } else {
                            tempArr.push(arrEle[j].value);
                        }
                    } else {
                        tempArr.push(arrEle[j].value);
                    }

                }
                result.push(tempArr);
                // console.log(tempArr);
            }
			
			tt = [];
			for (let i=0; i < columnLength; i++) {
				if (ii == i) {
					tt.push("Disclaimer copyright");
				} else {
					tt.push(" ");
				}
			}
			result.push(tt); */

            /* // (C2) CREATE NEW EXCEL "FILE"
            var workbook = XLSX.utils.book_new(),
                worksheet = XLSX.utils.aoa_to_sheet(result);
            workbook.SheetNames.push("First");
            workbook.Sheets["First"] = worksheet;

            // (C3) "FORCE DOWNLOAD" XLSX FILE
            XLSX.writeFile(workbook, "demo.xlsx"); */

            /* var svg = d3.select("body").append("svg");

            svg.selectAll("bar_1")
                .data(mydata2).enter()
                .append("rect")
                .attr("width", width)
                .attr("height", 100)
                .attr("x", function(d, i) {
                    return d[3].value;
                })
                .attr("y", function(d, i) {
                    return 50;
                })
                .attr("stroke", "red")

            ; */


        });

        console.log("end");
    };
}

function fitToColumn(arrayOfArray) {
    // get maximum character of each column
    return arrayOfArray[0].map((a, i) => ({ wch: Math.max(...arrayOfArray.map(a2 => a2[i] ? a2[i].toString().length : 0)) }));
}